name: Release, Deploy, Containerize

env:
  py: "3.11"

on:
  push:
    tags:
      - 'v*.*.*'

defaults:
  run:
    shell: bash -l {0}

permissions:
  contents: write

jobs:

  Test:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: [ "3.9", "3.10", "3.11" ]
        include:
          - os: ubuntu-latest
          # - os: windows-latest
          # - os: macos-latest
    runs-on: ${{ matrix.os }}

    steps:
    
      - name: 🧾 Checkout repository
        uses: actions/checkout@v4

      - name: 🛠️ Install Python ${{ matrix.python-version }} and deps with micromamba
        uses: mamba-org/setup-micromamba@v1
        with:
            environment-file: metator.yaml
            init-shell: bash
            cache-environment: false
            post-cleanup: 'none'
            generate-run-shell: true
            create-args: >-
              python=${{ matrix.python-version }}

      - name: 📦 Install package
        run: |
          pip install -e .[test]
        shell: micromamba-shell {0}

      - name: 🧪 Run tests with Python ${{ matrix.python-version }} 
        run: |
          ruff check . --select=E9,F63,F7,F82
          pytest --cov --cov-report=xml
        shell: micromamba-shell {0}

      - name: 🛌 Compute coverage with codecov
        run: |
          codecov -t ${{ secrets.CODECOV_TOKEN }}
        shell: micromamba-shell {0}

  Release:

    needs: Test
    runs-on: ubuntu-latest

    steps:
    
      - name: 🧾 Checkout repository
        uses: actions/checkout@v4

      - name: 🔍 Check version
        run: |
          tag_version=${GITHUB_REF#refs/tags/v}
          pkg_version=$(grep -Po '(?<=^version = ")[^"]*' pyproject.toml)
          if [ "$tag_version" != "$pkg_version" ]; then
            echo "Version mismatch: tag version ($tag_version) does not match pyproject.toml version ($pkg_version)"
            exit 1
          else 
            echo "Version match: tag version ($tag_version) matches pyproject.toml version ($pkg_version)"
          fi

      - name: 📦 Create GitHub release
        uses: softprops/action-gh-release@v2
      
  Deploy:

    needs: Test
    runs-on: ubuntu-latest

    steps:
        
      - uses: actions/checkout@v4

      - name: Set up Python ${{ env.py }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.py }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install hatch
          pip install twine
          
      - name: Build and publish
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{secrets.PYPI_TOKEN}}
        run: |
          hatch build
          twine upload dist/*

  Containerize:

    needs: Test
    runs-on: ubuntu-latest

    permissions:
      contents: write
      packages: write

    steps:
    
      - name: 🧾 Checkout repository
        uses: actions/checkout@v4

      - name: 🐳 Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Log in to the Github Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷 Get metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository_owner }}/metator
          tags: |
            type=raw,value=${{ github.ref_name }}
            type=raw,value=py-${{ env.py }}
            type=raw,value=latest

      - name: 🚀 Build and push package in local Docker image
        id: docker
        uses: docker/build-push-action@v5
        with:
          push: true
          context: .
          tags: ${{ steps.meta.outputs.tags }}
          build-args: |
            PKG_VERSION=${{ github.ref_name }}
            PY_VERSION=${{ env.py }}
